# nginx/nginx.conf

# This is a good default for a simple server.
worker_processes 1;

events {
    # Let's handle a bunch of connections at once.
    worker_connections 1024;
}

http {
    # Include default MIME types to make sure browsers know what they're getting.
    include mime.types;
    default_type application/octet-stream;
    
    # This is a performance optimization for sending files.
    sendfile on;
    
    # Keep connections alive for a little while.
    keepalive_timeout 65;

    server {
        # This server listens on port 80, which is the standard for web traffic.
        listen 80;
        server_name localhost;

        # This block handles all the requests for our React app's static files.
        location / {
            # Point Nginx to where our React build files live inside the container.
            root /usr/share/nginx/html;
            index index.html index.htm;
            
            # This is the magic part for single-page apps!
            # If a file isn't found, it sends the request back to index.html.
            # That lets React Router handle all the different URL paths.
            try_files $uri $uri/ /index.html;
        }

        # This is the really important part! It sends all requests that start with '/api/' 
        # over to our backend service.
        location /api/ {
            # Let's make sure the frontend and backend can talk to each other
            # without any nasty CORS errors. This is a bit permissive for now,
            # but it's perfect for development.
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            add_header 'Access-Control-Max-Age' 1728000;

            # We need to explicitly handle these pre-flight OPTIONS requests from the browser.
            if ($request_method = 'OPTIONS') {
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            # Before we send the request to the backend, we need to strip off the '/api/' part.
            # The backend service is expecting paths like '/products/' not '/api/products/'.
            rewrite ^/api/(.*)$ /$1 break;
            
            # Finally, we pass the request to the backend service.
            # We use the Docker Compose service name and port here.
            proxy_pass http://product_catalog_app:8000;
            
            # We also set some headers to make sure the backend knows where the request came from.
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
