# nginx/nginx.conf

# We'll start with a single worker process for now, which is a great default
# for a simple server like this.
worker_processes 1;

events {
    # Let's set a good number of connections for each worker to handle.
    worker_connections 1024;
}

http {
    # We include default MIME types so browsers know exactly what kind of content they're getting.
    include mime.types;
    default_type application/octet-stream;
    
    # This is a cool performance trick for sending files efficiently.
    sendfile on;
    
    # We'll keep connections alive for a little while to speed things up.
    keepalive_timeout 65;

    # And here's our server blockâ€”this is where the real work happens!
    server {
        # Our server is listening on port 80, the standard for web traffic.
        listen 80;
        server_name localhost;

        # This block is for our React frontend. It handles all the static files.
        location / {
            # We'll point Nginx to the directory where our React app's files live.
            root /usr/share/nginx/html;
            index index.html index.htm;
            
            # This is the magic for single-page apps!
            # If a user tries to access a route like /products and Nginx can't find a file
            # with that name, it sends the request back to index.html. This allows React Router
            # to take over and render the correct page.
            try_files $uri $uri/ /index.html;
        }

        # This is a dedicated block for all our API requests.
        # Any request that starts with '/api/' will be handled here.
        location /api/ {
            # We're adding some headers to make sure the frontend and backend can talk to each other
            # without any nasty CORS (Cross-Origin Resource Sharing) errors. This setup is pretty
            # permissive, which is great for development!
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            add_header 'Access-Control-Max-Age' 1728000;

            # We need to explicitly handle these pre-flight OPTIONS requests from browsers.
            # This makes sure the browser can check what methods are allowed before sending the real request.
            if ($request_method = 'OPTIONS') {
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            # This is where we tell Nginx to forward the request to our API Gateway service.
            # The trailing slash has been removed to ensure the path is correctly passed to the proxy.
            proxy_pass http://api_gateway:3000;
            
            # We also set some headers to make sure the API Gateway knows where the request originally came from.
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
